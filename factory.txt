using System;
namespace FactoryMethodPattern 
{    
public interface IAnimal    
{        
void Speak();        
void Action();    
}
public class Dog : IAnimal    
{        
public void Speak()        
{            
Console.WriteLine("Dog says: Bow-Wow.");        
}        
public void Action()        
{            
Console.WriteLine("Dogs prefer barking...\n");        
}    
}    
public class Tiger : IAnimal    
{        
public void Speak()        
{            
Console.WriteLine("Tiger says: Halum.");        
}        
public void Action()        
{            
Console.WriteLine("Tigers prefer hunting...\n");        
}    
}    
public abstract class IAnimalFactory    
{
public abstract IAnimal CreateAnimal();    
}    
public class DogFactory : IAnimalFactory    
{        
public override IAnimal CreateAnimal()        
{
 return new Dog();                    
}    
}    
public class TigerFactory : IAnimalFactory    
{        
public override IAnimal CreateAnimal()        
{  
   return new Tiger();  //Creating a Tiger       
}    
}    
class Client    
{        
static void Main(string[] args)        
{            
Console.WriteLine("***Factory Pattern Demo***\n");            
IAnimalFactory tigerFactory =new TigerFactory();    // Creating a Tiger Factory         
IAnimal aTiger = tigerFactory.CreateAnimal();    // Creating a tiger using the Factory Method         
aTiger.Speak();            
aTiger.Action();
IAnimalFactory dogFactory = new DogFactory();  // Creating a DogFactory          
IAnimal aDog = dogFactory.CreateAnimal();   // Creating a dog using the Factory Method          
aDog.Speak();            
aDog.Action();
Console.ReadKey();        
}    
} }